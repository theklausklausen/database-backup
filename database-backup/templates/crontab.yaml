{{- $root := . -}}
{{- range $key, $value := .Values.retention }}
  {{- if $value.enabled | default false }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $root.Values.nameOverride }}-{{ $key }}
  namespace: {{ $root.Values.namespace }}
  labels:
    {{- include "database-backup.labels" $ | nindent 4 }}
spec:
  schedule: "@{{ $key }}"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "database-backup.selectorLabels" $ | nindent 12 }}
          annotations:
            {{- toYaml $root.Values.podAnnotations | nindent 12 }}
        spec:
          imagePullSecrets:
            {{- toYaml $root.Values.imagePullSecrets | nindent 12 }}
          securityContext:
            {{- toYaml $root.Values.podSecurityContext | nindent 12 }}
          containers:
            - name: "{{ $key }}-create-directory"
              image: "{{ $root.Values.alpineImage.repository }}:{{ $root.Values.alpineImage.tag }}"
              imagePullPolicy: {{ $root.Values.image.pullPolicy }}
              resources:
                {{- toYaml $root.Values.resources | nindent 16 }}
              volumeMounts:
                - name: backupvolume
                  mountPath: /backup
              env:
                - name: BACKUP_DIR
                  value: /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/{{ $key }}
              command:
                - /bin/sh
                - -c
                - 'echo "Create backup directory $BACKUP_DIR"; mkdir -p $BACKUP_DIR'
            - name: "{{ $key }}-backup"
              image: "{{ $root.Values.image.repository }}:{{ $root.Values.image.tag }}"
              imagePullPolicy: {{ $root.Values.image.pullPolicy }}
              resources:
                {{- toYaml $root.Values.resources | nindent 16 }}
              env:
                - name: DB_HOST
                  value: "{{ $root.Values.db.host }}"
                - name: DB_PORT
                  value: "{{ $root.Values.db.port }}"
                - name: DB_USER
                  {{- toYaml $root.Values.db.user | nindent 18 }}
                - name: DB_PASSWORD
                  {{- toYaml $root.Values.db.password | nindent 18 }}
                - name: DB_DATABASE
                  value: {{ $root.Values.db.database }}
                - name: TZ
                  value: "{{ $root.Values.timezone | default "Europe/Berlin" }}"
                - name: BACKUP_DIR
                  value: /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/{{ $key }}
              
                {{- if eq $root.Values.db.dialect "postgres" }}
              command:
                - /bin/sh
                - -c
                - 'TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S);
                  echo "Backup {{ $root.Values.db.database }} to $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar";
                  PGPASSWORD=$DB_PASSWORD pg_dump -F t
                    -h $DB_HOST
                    -p $DB_PORT
                    -U $DB_USER $DB_DATABASE >
                    $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar || exit 1;
                  echo "Backup completed";
                  echo "Copying latest backup";
                  cp -fv $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/latest.tar'
                {{- else if eq $root.Values.db.dialect "mysql" }}
                - 'TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S);
                  echo "Backup {{ $root.Values.db.database }} to $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar";
                  mysqldump -h $DB_HOST
                    -P $DB_PORT
                    -u $DB_USER
                    -p$DB_PASSWORD $DB_DATABASE > /tmp/{{ $root.Values.db.database }}-${TIMESTAMP}.sql || exit 1;
                  tar -cf $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar -C /tmp {{ $root.Values.db.database }}-${TIMESTAMP}.sql || exit 1;
                  echo "Backup completed";
                  echo "Copying latest backup";
                  cp -fv $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/latest.tar'
                {{- else if eq $root.Values.db.dialect "mariadb" }}
                - 'TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S);
                  echo "Backup {{ $root.Values.db.database }} to $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar";
                  mysqldump -h $DB_HOST
                    -P $DB_PORT
                    -u $DB_USER
                    -p$DB_PASSWORD $DB_DATABASE |
                    tar -cf $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar -C /dev/stdin . || exit 1;
                  echo "Backup completed";
                  echo "Copying latest backup";
                  cp -fv $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/latest.tar'
                {{- else if eq $root.Values.db.dialect "mongo" }}
                - 'TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S);
                  echo "Backup {{ $root.Values.db.database }} to $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar";
                  mongodump --host $DB_HOST
                    --port $DB_PORT
                    --username $DB_USER
                    --password $DB_PASSWORD
                    --db $DB_DATABASE
                    --archive=$BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar
                    --gzip || exit 1;
                  echo "Backup completed";
                  echo "Copying latest backup";
                  cp -fv $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/latest.tar'
                {{- else if eq $root.Values.db.dialect "redis" }}
                - 'TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S);
                  echo "Backup {{ $root.Values.db.database }} to $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar";
                  redis-cli -h $DB_HOST
                    -p $DB_PORT
                    -a $DB_PASSWORD
                    --rdb $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.rdb || exit 1;
                  tar -cf $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar -C $BACKUP_DIR {{ $root.Values.db.database }}-${TIMESTAMP}.rdb;
                  echo "Backup completed";
                  echo "Copying latest backup";
                  cp -fv $BACKUP_DIR/{{ $root.Values.db.database }}-${TIMESTAMP}.tar /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/latest.tar'
                {{- end }}
              volumeMounts:
                - name: backupvolume
                  mountPath: /backup
            - name: "{{ $key }}-delete-old-backups"
              image: "{{ $root.Values.alpineImage.repository }}:{{ $root.Values.alpineImage.tag }}"
              imagePullPolicy: {{ $root.Values.alpineImage.pullPolicy }}
              resources:
                {{- toYaml $root.Values.resources | nindent 16 }}
              env:
                - name: BACKUP_DIR
                  value: /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/{{ $key }}
                - name: OLDER_THAN_MINUTES
                  value: "{{- include "database-backup.maxAge" (dict "val1" $key "val2" $value.keep) }}"
                - name: TZ
                  value: "{{ $root.Values.timezone | default "Europe/Berlin" }}"
              command:
                - /bin/sh
                - -c
                - 'echo "Delete old backups in $BACKUP_DIR older than $OLDER_THAN_MINUTES minutes:";
                  find $BACKUP_DIR -type f -cmin +$OLDER_THAN_MINUTES -exec ls -lah {} \;
                  find $BACKUP_DIR -type f -cmin +$OLDER_THAN_MINUTES -exec rm -f {} \;'
              volumeMounts:
                - name: backupvolume
                  mountPath: /backup
          volumes:
            - name: backupvolume
              {{- toYaml $root.Values.volume | default "emptyDir: {}" | nindent 14 }}
          restartPolicy: OnFailure
          {{- with $root.Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $root.Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $root.Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
  {{- end }}
{{- end }}