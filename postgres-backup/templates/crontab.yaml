{{- $root := . -}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "postgres-backup.serviceAccountName" $ }}
  namespace: {{ $root.Values.namespace }}
  labels:
    {{- include "postgres-backup.labels" $ | nindent 4 }}
{{- range $key, $value := .Values.retention }}
  {{- if $value.enabled | default false }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $root.Values.nameOverride }}-{{ $key }}
  namespace: {{ $root.Values.namespace }}
  labels:
    {{- include "postgres-backup.labels" $ | nindent 4 }}
spec:
  schedule: "@{{ $key }}"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "postgres-backup.selectorLabels" $ | nindent 12 }}
          annotations:
            {{- toYaml $root.Values.podAnnotations | nindent 12 }}
        spec:
          # ttlSecondsAfterFinished: 180
          imagePullSecrets:
            {{- toYaml $root.Values.imagePullSecrets | nindent 12 }}
          serviceAccountName: {{ include "postgres-backup.serviceAccountName" $ }}
          securityContext:
            {{- toYaml $root.Values.podSecurityContext | nindent 12 }}
          initContainers:
            - name: "{{ $key }}-backup"
              image: "{{ $root.Values.image.repository }}:{{ $root.Values.image.tag }}"
              imagePullPolicy: {{ $root.Values.image.pullPolicy }}
              resources:
                {{- toYaml $root.Values.resources | nindent 16 }}
              env:
                - name: POSTGRES_HOST
                  value: "{{ $root.Values.db.host }}"
                - name: POSTGRES_PORT
                  value: "{{ $root.Values.db.port }}"
                - name: POSTGRES_USER
                  {{- toYaml $root.Values.db.user | nindent 18 }}
                - name: POSTGRES_PASSWORD
                  {{- toYaml $root.Values.db.password | nindent 18 }}
                - name: POSTGRES_DB
                  value: "{{ $root.Values.db.database }}"
              command:
                - /bin/sh
                - -c
                - 'echo "Create backup directory /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/{{ $key }}";
                  mkdir -p /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/{{ $key }};
                  echo
                  "Backup {{ $root.Values.db.database }} to
                  /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/{{ $key }}/{{ $root.Values.db.database }}-$(date +%Y-%m-%d_%H-%M-%S).sql";
                  PGPASSWORD=$POSTGRES_PASSWORD pg_dump 
                    -h $POSTGRES_HOST
                    -p $POSTGRES_PORT
                    -U $POSTGRES_USER $POSTGRES_DB >
                    /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/{{ $key }}/{{ $root.Values.db.database }}-$(date +%Y-%m-%d_%H-%M-%S).sql;
                  echo "Backup done";'
              volumeMounts:
                - name: backupvolume
                  mountPath: /backup
          containers:
            - name: "{{ $key }}-delete-old-backups"
              image: "{{ $root.Values.alpineImage.repository }}:{{ $root.Values.alpineImage.tag }}"
              imagePullPolicy: {{ $root.Values.alpineImage.pullPolicy }}
              resources:
                {{- toYaml $root.Values.resources | nindent 16 }}
              env:
                - name: BACKUP_DIR
                  value: /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/{{ $key }}
                - name: RETENTION
                  value: "{{ $key }}"
                - name: KEEP
                  value: "{{ $value.keep }}"
                - name: TZ
                  value: "{{ $root.Values.timezone | default "Europe/Berlin" }}"
              command:
                - /bin/sh
                - -c
                - 'echo "Delete old backups in /backup/{{ $root.Values.namespace }}/{{ $root.Values.db.database }}/{{ $key }}";
                  if [[ "$RETENTION" == "yearly" ]]; then
                    KEEP=$(($KEEP * 365))
                  elif [[ "$RETENTION" == "monthly" ]]; then
                    KEEP=$(($KEEP * 30))
                  elif [[ "$RETENTION" == "weekly" ]]; then
                    KEEP=$(($KEEP * 7 * 24))
                  elif [[ "$RETENTION" == "daily" ]]; then
                    KEEP=$(($KEEP))
                  elif [[ "$RETENTION" == "hourly" ]]; then
                    KEEP=$(($KEEP))
                  else
                    echo "No valid retention period given"
                    exit 1
                  fi
                  KEEP=$($KEEP *24 * 60)
                  find $BACKUP_DIR -type f -cmin +$KEEP -exec rm -f {} \;'
              volumeMounts:
                - name: backupvolume
                  mountPath: /backup
          volumes:
            - name: backupvolume
              {{- toYaml $root.Values.volume | default "emptyDir: {}" | nindent 14 }}
          restartPolicy: OnFailure
          {{- with $root.Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $root.Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $root.Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
  {{- end }}
{{- end }}